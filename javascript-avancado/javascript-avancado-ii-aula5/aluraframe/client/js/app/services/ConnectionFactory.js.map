{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["stores","version","dbName","connection","close","ConnectionFactory","constructor","Error","getConnection","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","e","_creatStores","target","result","onsuccess","bind","onerror","console","log","error","name","forEach","store","objectStoreNames","contains","deleteObjectStore","createObjectStore","autoIncrement","closedConnection"],"mappings":";AACA,MAAMA,SAAS,CAAC,aAAD,CAAf;AACA,MAAMC,UAAU,CAAhB;AACA,MAAMC,SAAS,YAAf;;AAEA,IAAIC,aAAa,IAAjB;;AAEA,IAAIC,QAAQ,IAAZ;;AAEA,OAAO,MAAMC,iBAAN,CAAwB;;AAE3BC,kBAAc;;AAEV,cAAM,IAAIC,KAAJ,CAAU,sDAAV,CAAN;AACH;;AAED,WAAOC,aAAP,GAAuB;;AAEnB,eAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;;AAEpC,gBAAIC,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBb,MAAtB,EAA8BD,OAA9B,CAAlB;;AAEAW,wBAAYI,eAAZ,GAA8BC,KAAK;;AAE/BZ,kCAAkBa,YAAlB,CAA+BD,EAAEE,MAAF,CAASC,MAAxC;AACH,aAHD;;AAKAR,wBAAYS,SAAZ,GAAwBJ,KAAK;AACzB,oBAAI,CAACd,UAAL,EAAiB;AACbA,iCAAac,EAAEE,MAAF,CAASC,MAAtB;AACAhB,4BAAQD,WAAWC,KAAX,CAAiBkB,IAAjB,CAAsBnB,UAAtB,CAAR;AACAA,+BAAWC,KAAX,GAAmB,YAAY;AAC3B,8BAAM,IAAIG,KAAJ,CAAU,8CAAV,CAAN;AACH,qBAFD;AAGH;AACDG,wBAAQP,UAAR;AACH,aATD;;AAWAS,wBAAYW,OAAZ,GAAsBN,KAAK;;AAEvBO,wBAAQC,GAAR,CAAYR,EAAEE,MAAF,CAASO,KAArB;;AAEAf,uBAAOM,EAAEE,MAAF,CAASO,KAAT,CAAeC,IAAtB;AACH,aALD;AAMH,SA1BM,CAAP;AA2BH;;AAED,WAAOT,YAAP,CAAoBf,UAApB,EAAgC;;AAE5BH,eAAO4B,OAAP,CAAeC,SAAS;;AAEpB,gBAAI1B,WAAW2B,gBAAX,CAA4BC,QAA5B,CAAqCF,KAArC,CAAJ,EAAiD1B,WAAW6B,iBAAX,CAA6BH,KAA7B;;AAEjD1B,uBAAW8B,iBAAX,CAA6BJ,KAA7B,EAAoC,EAAEK,eAAe,IAAjB,EAApC;AACH,SALD;AAMH;;AAED,WAAOC,gBAAP,GAA0B;;AAEtB,YAAIhC,UAAJ,EAAgB;AACZC;AACAD,yBAAa,IAAb;AACH;AACJ;AAtD0B","file":"ConnectionFactory.js","sourcesContent":["\r\nconst stores = ['negociacoes']\r\nconst version = 3;\r\nconst dbName = 'aluraframe'\r\n\r\nlet connection = null;\r\n\r\nlet close = null;\r\n\r\nexport class ConnectionFactory {\r\n\r\n    constructor() {\r\n\r\n        throw new Error('Não é possivél criar instâncias de ConnectionFactory')\r\n    }\r\n\r\n    static getConnection() {\r\n\r\n        return new Promise((resolve, reject) => {\r\n\r\n            let openRequest = window.indexedDB.open(dbName, version)\r\n\r\n            openRequest.onupgradeneeded = e => {\r\n\r\n                ConnectionFactory._creatStores(e.target.result)\r\n            }\r\n\r\n            openRequest.onsuccess = e => {\r\n                if (!connection) {\r\n                    connection = e.target.result\r\n                    close = connection.close.bind(connection)\r\n                    connection.close = function () {\r\n                        throw new Error('Você não pode fechar diretamente uma conexão')\r\n                    }\r\n                }\r\n                resolve(connection)\r\n            }\r\n\r\n            openRequest.onerror = e => {\r\n\r\n                console.log(e.target.error)\r\n\r\n                reject(e.target.error.name)\r\n            }\r\n        })\r\n    }\r\n\r\n    static _creatStores(connection) {\r\n\r\n        stores.forEach(store => {\r\n\r\n            if (connection.objectStoreNames.contains(store)) connection.deleteObjectStore(store)\r\n\r\n            connection.createObjectStore(store, { autoIncrement: true })\r\n        })\r\n    }\r\n\r\n    static closedConnection() {\r\n\r\n        if (connection) {\r\n            close()\r\n            connection = null\r\n        }\r\n    }\r\n}"]}
