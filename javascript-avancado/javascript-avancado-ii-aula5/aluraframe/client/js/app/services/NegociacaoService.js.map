{"version":3,"sources":["../../app-es6/services/NegociacaoService.js"],"names":["HttpService","ConnectionFactory","NegociacaoDao","Negociacao","NegociacaoService","constructor","_http","obterNegociacoesDaSemana","Promise","resolve","reject","get","then","negociacoes","console","log","map","objeto","Date","data","quantidade","valor","catch","erro","obterNegociacoesDaSemanaAnterior","obterNegociacoesDaSemanaRetrasada","obterNegociacoes","all","periodos","reduce","dados","periodo","concat","dado","cadastra","negociacao","getConnection","connection","dao","adiciona","Error","lista","listaTodos","apaga","apagaTodos","importa","listaAtual","filter","some","negociacaoExistente","JSON","stringify"],"mappings":"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","file":"NegociacaoService.js","sourcesContent":["import {HttpService} from './HttpService'\nimport {ConnectionFactory} from './ConnectionFactory'\nimport {NegociacaoDao} from '../dao/NegociacaoDao'\nimport {Negociacao} from '../models/Negociacao'\n\n\nexport class NegociacaoService {\n    \n    constructor() {\n        \n        this._http = new HttpService();\n    }\n    \n    obterNegociacoesDaSemana() {\n       \n       return new Promise((resolve, reject) => {\n        \n            this._http\n                .get('negociacoes/semana')\n                .then(negociacoes => {\n                    console.log(negociacoes);\n                    resolve(negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor)));\n                })\n                .catch(erro => {\n                    console.log(erro);\n                    reject('Não foi possível obter as negociações da semana');\n                });  \n       });        \n    }\n    \n    obterNegociacoesDaSemanaAnterior() {\n       \n       return new Promise((resolve, reject) => {\n        \n            this._http\n                .get('negociacoes/anterior')\n                .then(negociacoes => {\n                    console.log(negociacoes);\n                    resolve(negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor)));\n                })\n                .catch(erro => {\n                    console.log(erro);\n                    reject('Não foi possível obter as negociações da semana anterior');\n                });  \n       }); \n       \n        \n    }\n    \n    obterNegociacoesDaSemanaRetrasada() {\n       \n       return new Promise((resolve, reject) => {\n        \n            this._http\n                .get('negociacoes/retrasada')\n                .then(negociacoes => {\n                    console.log(negociacoes);\n                    resolve(negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor)));\n                })\n                .catch(erro => {\n                    console.log(erro);\n                    reject('Não foi possível obter as negociações da semana retrasada');\n                });  \n       }); \n    }    \n    \n    \n    obterNegociacoes() {\n\n        return new Promise((resolve, reject) => {\n\n            Promise.all([\n                this.obterNegociacoesDaSemana(),\n                this.obterNegociacoesDaSemanaAnterior(),\n                this.obterNegociacoesDaSemanaRetrasada()\n            ]).then(periodos => {\n\n                let negociacoes = periodos\n                    .reduce((dados, periodo) => dados.concat(periodo), [])\n                    .map(dado => new Negociacao(new Date(dado.data), dado.quantidade, dado.valor ));\n\n                resolve(negociacoes);\n\n            }).catch(erro => reject(erro));\n        });\n    }    \n\n    cadastra(negociacao) {\n        \n        return ConnectionFactory.getConnection()\n            .then(connection => new NegociacaoDao(connection))\n            .then(dao => dao.adiciona(negociacao))\n            .then (() => 'Negociação adicionada com sucesso')\n            .catch(erro => {\n                console.log(erro)\n                throw new Error('Não foi possível adicionar negociação')\n            })\n    }\n    lista() {\n\n        return ConnectionFactory.getConnection()\n            .then(connection => new NegociacaoDao(connection))\n            .then(dao => dao.listaTodos())\n            .catch(erro => {\n                    console.log(erro)\n                    throw new Error('Não foi possível obter as negociações')\n            })\n    }\n\n    apaga() {\n\n        return ConnectionFactory\n            .getConnection()\n            .then(connection => new NegociacaoDao(connection))\n            .then(dao => dao.apagaTodos())\n            .then(()=> 'Negociações apagadas com sucesso')\n            .catch(erro => {\n                console.log(erro)\n                throw new Error('Não foi possível apagar as negociações.')\n            })\n    }\n\n    importa(listaAtual) {\n\n        return this.obterNegociacoes()\n            .then(negociacoes =>\n                negociacoes.filter(negociacao =>\n                    !listaAtual.some(negociacaoExistente =>\n                        JSON.stringify(negociacao) == JSON.stringify(negociacaoExistente)\n                    )\n                )\n            )\n            .catch(erro => {\n                console.log(erro)\n                throw new Error('Não foi possivel buscar negociações')\n            })\n    }\n}\n"]}
